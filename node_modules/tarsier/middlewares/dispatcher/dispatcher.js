/**
 * dispatcher requests
 *     0. inject userful tools for action
 *     1. route actions
 * @author ddchen chenjunyu@baidu.com
 */
var actionRouterFactory = require("../../library/actionRouterFactory.js").create();
var path = require('path');

module.exports = function(app) {
	var tools = initCommonTools(app.tarsier.appConf.extensions.tools);

	var config = app.tarsier.appConf.app;
	actionRouterFactory.load(config);

	for (var moduleName in config) {
		var module = config[moduleName];
		if (!module) module = {};
		module["name"] = moduleName;

		// load plugin
		addModulePlugin(app, module);
		useModuleMiddleware(app, module, tools);
	}
}

var initCommonTools = function(toolsConf) {
	var tools = {};
	for (var name in toolsConf) {
		var toolGenerator = require(toolsConf[name]);
		tools[name] = toolGenerator(tools);
	}
	return tools;
}

var addModulePlugin = function(app, module) {
	var pluginConf = require(module.plugin);
	for (var pluginName in pluginConf) {
		var pluginPath = path.join(module.modulePath, pluginConf[pluginName].path);
		var pluginAction = require(pluginPath);
		app.use(module.pathPattern, pluginAction);
	}
}

var useModuleMiddleware = function(app, module, tools) {
	var systemMode = app.tarsier.appConf.systemMode;
	var mock = app.tarsier.appConf.mock;
	app.use(module.pathPattern, function(req, res, next) {
		var requestParams = {
			req: req,
			res: res,
			next: next
		};
		if (systemMode === "mock" && mock && mock.action) {
			var actionPath = actionRouterFactory.getActionPath(module, requestParams);
			if (actionPath) {
				req.actionPath = actionPath;
				req.module = module;
				var action = require(mock.action);
			}
		} else {
			var action = actionRouterFactory.getAction(module, requestParams);
		}
		if (typeof action === "function") {
			var appConf = app.tarsier.appConf;
			var routerConfig = require(module.router);
			var routerInfo = {
				module: module
			};
			loadRequestLevelTools(appConf.extensions.requestLevelTools, requestParams, routerInfo, tools);
			action(req, res, tools);
		} else {
			next();
		}
	});
}

var loadRequestLevelTools = function(requestLevelTools, requestParams, routerInfo, tools) {
	for (var name in requestLevelTools) {
		var toolPath = requestLevelTools[name];
		var toolGenerator = require(toolPath);
		tools[name] = toolGenerator && toolGenerator(requestParams.req, requestParams.res, tools, routerInfo);
	}
}