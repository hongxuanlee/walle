/**
 * @author  ddchen chenjunyu@baidu.com
 */
var middlewareManager = require("./library/middlewareManager.js");
var logger = require("./library/logger.js");
var validateConfig = require("./configCheck/validateConfig.js");
var path = require("path");
var colors = require("colors");

var DEFAUL_MIDDLEWARES_DIR = path.join(__dirname, "./middlewares/");

var adjustMiddlewareConf = function(middlewareConfig) {
	middlewareConfig.forEach(function(elem) {
		var filePath = elem.filePath;
		if (!filePath) {
			filePath = path.join(DEFAUL_MIDDLEWARES_DIR + elem.name, "/" + elem.name + ".js");
			elem.filePath = filePath;
		}
	});
}

module.exports = {
	launch: function(app, appConf) {
		var middlewareConfig = appConf.middleware;

		adjustMiddlewareConf(middlewareConfig);

		// create tarsier and hang on app
		// we want every middleware can use this object conveniently
		app.tarsier = {
			logger: logger,
			appConf: appConf
		};
		// validate config
		var vali = validateConfig(app, appConf);
		logger.log({
			process: "validate appConf",
			result: vali
		});
		// load middlewares
		try {
			middlewareManager.load(app, middlewareConfig);
		} catch (e) {
			logger.logError({
				error_msg: "error happened when load middlewares",
				error_info: e.toString()
			});
		}
	},
	logger: logger
}