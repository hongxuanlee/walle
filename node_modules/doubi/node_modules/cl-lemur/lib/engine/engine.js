/**
 * @author  ddchen
 */

var TokenSpliter = require("hanuman");
var Processor = require("../processor/processor.js");
var Interpreter = require("../interpreter/interpreter.js");

var getDefaultTokenConfig = function(_left, _right) {
	_left = _left || "<#";
	_right = _right || "#>";
	return [{
		leftDelimiter: _left,
		wordReg: ".*?",
		rightDelimiter: _right,
		type: "interpolate"
	}, {
		leftDelimiter: _left + "=",
		wordReg: ".*?",
		rightDelimiter: _right,
		type: "evaluate"
	}, {
		leftDelimiter: _left + "\\s*inline(?=(" + _right + ")|\\s)",
		wordReg: ".*?",
		rightDelimiter: _right,
		type: "inline",
		block: {
			type: "inline"
		},
		processor: ["attributeMap"]
	}, {
		leftDelimiter: _left + "\\s*block(?=(" + _right + ")|\\s)",
		wordReg: ".*?",
		rightDelimiter: _right,
		type: "block",
		block: {
			type: "start"
		},
		processor: ["attributeMap"]
	}, {
		leftDelimiter: _left + "\\s*/block(?=(" + _right + ")|\\s)",
		wordReg: ".*?",
		rightDelimiter: _right,
		type: "block",
		block: {
			type: "end"
		}
	}];
}

var getTokenSpliter = function(config) {
	var defConfig = getDefaultTokenConfig(config.leftDelimiter, config.rightDelimiter);
	if (config.tokenGrammers) {
		defConfig = defConfig.concat(config.tokenGrammers);
	}
	return new TokenSpliter(defConfig, config.tokenConf);
}

var getProcessor = function(config) {
	var processor = Processor.create();
	var pluginMap = config.processorPluginMap;
	if (pluginMap) {
		for (var pluginName in pluginMap) {
			processor.addProcessPlugin(pluginName, pluginMap[pluginName]);
		}
	}
	return processor;
}

var getInterpreter = function(config) {
	var interpreter = Interpreter.create(config.interfaceConf);
	var pluginMap = config.interpreterPluginMap || {};
	for (var pluginName in pluginMap) {
		interpreter.addInterpreterPlugin(pluginName, pluginMap[pluginName]);
	}
	return interpreter;
}

module.exports = {
	/**
	 * config
	 *     rightDelimiter
	 * 	   leftDelimiter
	 *     tokenGrammers
	 *     tokenConf
	 *     processorPluginMap
	 *     interpreterPluginMap
	 *     interfaceConf
	 */
	create: function(config) {
		if (!config) config = {};
		var tokenSpliter = getTokenSpliter(config);
		var processor = getProcessor(config);
		var interpreter = getInterpreter(config);
		return {
			compile: function(source) {
				try {
					var tokenTree = tokenSpliter.buildTokenTree(source);
					processor.process(tokenTree);
					var targetCode = interpreter.interpret(tokenTree);
				} catch (e) {
					throw new Error("error happened when compile source. source code: " + source);
				}

				return targetCode;
			}
		}
	}
}