/**
 * 
 * @author  ddchen
 */

var codeJointer = require("./codeJointer.js");

var escapeText = function(text) {
	text = text.replace(/(')/g, "\\'");
	return text;
}

module.exports = {
	create: function() {
		var interpreterPluginMap = {};

		var parseBlockNode = function(node, childCodes) {
			var runCode = interpretNode(node, childCodes);
			codeJointer.declareBlockFun(node, runCode);
		}

		var interpretNode = function(node, childCodes) {
			var type = node.token && node.token.type;
			var plugin = interpreterPluginMap[type];
			var code = "";
			var isBlock = node.isBlockNode();
			if (plugin) {
				code = plugin.apply(node, [node.token, childCodes]);
			} else {
				if (isBlock) {
					code = childCodes && childCodes.join("");
				} else {
					code = node.token && node.token.word;
				}
			}
			return code;
		}

		var addInterpreterPlugin = function(nodeType, plugin) {
			if (plugin && typeof plugin === "function") {
				interpreterPluginMap[nodeType] = plugin;
			}
		}

		// default plugins
		addInterpreterPlugin("text", function(token, childCodes) {
			return "lemur.echo('" + escapeText(token.word) + "');";
		});
		addInterpreterPlugin("evaluate", function(token, childCodes) {
			return "lemur.echo(" + token.word + ");";
		});
		addInterpreterPlugin("interpolate", function(token, childCodes) {
			return token.word;
		});

		return {
			parseBlockNode: parseBlockNode,
			interpretNode: interpretNode,
			addInterpreterPlugin: addInterpreterPlugin
		}
	}
}