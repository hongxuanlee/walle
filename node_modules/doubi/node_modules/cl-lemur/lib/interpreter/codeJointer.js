/**
 * code distribution
 * 		definition field
 *  	global field
 *  	run field
 * 
 * @author  ddchen
 */

var getRunBlockCode = function(node) {
	var attrCodeMap = getAttrCodeMap(node);
	var __data = joinConfig(attrCodeMap);
	var runCode = "lemur.runDeFunc('" + node.funName + "' , " + __data + ");";
	return runCode;
}

var declareBlockFun = function(node, runCode) {
	var funcDefinition = joinBlockDefinition(node, runCode);

	var funName = node.funName;
	var type = (node.token && node.token.type) || "";
	var parentFunName = node.parent && node.parent.funName;
	if (!parentFunName) parentFunName = "";
	var attributeMap = node.token && node.token.__attributeMap;
	var configCode = joinConfig(attributeMap);

	if (configCode) {
		var declareStatement = "lemur.declare({name:'" + funName + "'," +
			"parent:'" + parentFunName + "'," +
			"fun:" + funcDefinition + "," +
			"type:'" + type + "'," +
			"opts:" + configCode + "});";

	} else {
		var declareStatement = "lemur.declare({name:'" + funName + "' ," +
			"fun:" + funcDefinition + "," +
			"type:'" + type + "'," +
			"parent:'" + parentFunName + "'});";

	}
	node.addGlobalCode(declareStatement);
}

var joinBlockDefinition = function(node, runCode) {
	// fetch definition area prepared by son nodes
	var sonDefinitions = node.getDefinitionFeildCode();
	var varsCode = "eval(lemur.unfold(__data));";

	var funcDefinition = "function(__data){" +
		varsCode +
		sonDefinitions +
		" return function(){" + runCode + "}}";
	return funcDefinition;
}

var getAttrCodeMap = function(node) {
	var word = node.token.word;
	var attrCodeMap = {};
	if (!word) word = "";
	word = word.trim();
	var pairs = word.match(/\S+\s*=\s*\S+/g);
	if (pairs) {
		for (var i = 0; i < pairs.length; i++) {
			var pair = pairs[i];
			var kvs = pair.split("=");
			var keyName = kvs[0].trim();
			attrCodeMap[keyName] = kvs[1].trim();
		}
	}
	return attrCodeMap;
}

var joinConfig = function(attributeMap) {
	if (!attributeMap) return null;
	var configCode = "{";
	for (var attrName in attributeMap) {
		configCode += attrName + ":" + attributeMap[attrName] + ",";
	}
	configCode += "}";
	return configCode;
}


module.exports = {
	declareBlockFun: declareBlockFun,
	getRunBlockCode: getRunBlockCode
}