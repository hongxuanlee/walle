var lemurToolsWrapper = require("./lemur-tools.js");
var lemurLogWrapper = require("./lemur-log.js");
var lemurQueryWrapper = require("./lemur-query.js");
var lemurResWrapper = require("./lemur-res.js");
var Block = require("./block.js");

var Lemur = function() {
	this.__output = [];
	this.__blockMap = {};
	this.__resMap = {};
}

Lemur.create = function() {
	return new Lemur();
}

var runBlock = function(block, data, context) {
	// generate closure
	try {
		var blockClosure = block.fun(data);
	} catch (e) {
		throw new Error(JSON.stringify({
			point: "Error happend when generate closure",
			block: {
				name: block.name,
				type: block.type,
				opts: block.opts
			},
			err: e.toString()
		}));
	}
	//
	try {
		context.echo(blockClosure);
	} catch (e) {
		throw new Error(JSON.stringify({
			point: "Error happend when run closure",
			block: {
				name: block.name,
				type: block.type,
				opts: block.opts
			},
			err: e.toString()
		}));
	}
}

Lemur.prototype = {
	contructor: Lemur,
	declare: function(config) {
		var name = config.name;
		var parent = config.parent;
		var block = this.__blockMap[name] = this.__blockMap[name] || new Block();
		if (parent) {
			var parentBlock = this.__blockMap[parent] = this.__blockMap[parent] || new Block();
			parentBlock.appendChild(block);
		}
		block.mergeConf(config);
	},
	runDeFunc: function(name, data) {
		var block = this.__blockMap[name];
		// generate closure
		runBlock(block, data, this);
	},
	echo: function(content) {
		if (typeof content === 'function') {
			this.__output.push(content());
		} else {
			this.__output.push(content);
		}
	},
	empty: function() {
		this.__output.splice(0, this.__output.length);
	},

	/**
	 * @param  separator  "array" return cloned output array, otherwise return jointer with it. 
	 */
	getResult: function(separator) {
		separator = separator || '';
		if (separator === "array") {
			var resArr = [];
			for (var i = 0; i < this.__output.length; i++) {
				resArr.push(this.__output[i]);
			}
			return resArr;
		} else {
			return this.__output.join(separator);
		}
	},
	run: function(data, selector, separator) {
		var block = this.queryBlock(selector);
		if (!block) return "";
		this.empty();
		runBlock(block, data, this);
		return this.getResult(separator);
	}
}

lemurToolsWrapper(Lemur.prototype);
lemurLogWrapper(Lemur.prototype);
lemurQueryWrapper(Lemur.prototype);
lemurResWrapper(Lemur.prototype);

module.exports = Lemur;