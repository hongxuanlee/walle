/**
 * block
 * 		|-------name
 *   	|-------opts
 *   	|-------children
 *   	|-------parent
 *   	|-------fun
 *   	|-------type
 */
var Block = function() {
	this.opts = {};
	this.children = [];
}

Block.prototype = {
	constructor: Block,
	mergeConf: function(config) {
		for (var name in config) {
			if(name !== "parent" && name !== "children"){
				this[name] = config[name];
			}
		}
	},
	appendChild: function(block) {
		this.children.push(block);
		block.parent = this;
	},
	isAncestor: function(nextBlock) {
		var children = this.children;
		for (var i = 0; i < children.length; i++) {
			var child = children[i];
			if (child === nextBlock || child.isAncestor(nextBlock)) {
				return true;
			}
		}
		return false;
	},
	isDescendant: function(prevBlock) {
		var parent = this.parent;
		while (parent) {
			if (parent === prevBlock) {
				return true;
			}
			parent = parent.parent;
		}
		return false;
	}
}

module.exports = Block;