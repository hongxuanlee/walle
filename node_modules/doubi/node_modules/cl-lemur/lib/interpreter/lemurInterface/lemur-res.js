/**
 * @author  ddchen
 */


var filterFuncs = function(funcs, __blockMap, outterBlock) {
	if (!outterBlock) return funcs;
	var filterdArr = [];
	for (var i = 0; i < funcs.length; i++) {
		var funItem = funcs[i];
		if (funItem.ownerName) {
			var innerBlock = __blockMap[funItem.ownerName];
			if (outterBlock.isAncestor(innerBlock) || outterBlock === innerBlock) {
				filterdArr.push(funItem);
			}
		}
	}
	return filterdArr;
}

module.exports = function(proto) {

	proto.collect = function(id, func, funName) {
		if (!(typeof func === "function")) return;
		this.__resMap[id] = this.__resMap[id] || [];
		this.__resMap[id].push({
			fun: func,
			ownerName: funName
		});
	}

	proto.runRes = function(id, selector) {
		var funcs = this.__resMap[id];
		var outterBlock = selector && this.queryBlock(selector);
		if (funcs) {
			funcs = filterFuncs(funcs, this.__blockMap, outterBlock);

			for (var i = 0; i < funcs.length; i++) {
				var funItem = funcs[i];
				funItem.fun();
			}
		}
	}

	proto.extract = function(id, selector, separator) {
		this.empty();
		this.runRes(id, selector);
		return this.getResult(separator);
	}
}