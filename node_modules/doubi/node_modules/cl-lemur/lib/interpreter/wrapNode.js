/**
 * @author ddchen
 *
 * tree code area:
 * 		global field code
 *   	definition field code
 *   	execute filed code
 */

var doWrap = false;

var wrapNode = function(node) {
	if (doWrap) return;
	addProtoActions(node);
	doWrap = true;
}

var addProtoActions = function(node) {
	var proto = node.contructor.prototype;

	proto.getGlobalFeildCode = function() {
		var globalCodes = "";
		if (Array.isArray(this.globalFeilds)) {
			for (var i = 0; i < this.globalFeilds.length; i++) {
				globalCodes += this.globalFeilds[i];
			}
		}
		return globalCodes;
	}

	proto.addGlobalCode = function(code) {
		this.globalFeilds = this.globalFeilds || [];
		this.globalFeilds.push(code);
	}

	proto.getDefinitionFeildCode = function() {
		var sonDefinitions = "";
		if (Array.isArray(this.definitionFeilds)) {
			for (var i = 0; i < this.definitionFeilds.length; i++) {
				sonDefinitions += this.definitionFeilds[i];
			}
		}
		return sonDefinitions;
	}

	proto.addDefinitionCode = function(definition) {
		this.definitionFeilds = this.definitionFeilds || [];
		this.definitionFeilds.push(definition);
	}

	proto.isBlockNode = function() {
		if (!this.token) { // root
			return true;
		}
		if (this.token.block && this.token.block.type) {
			return true;
		}
		return false;
	}

	proto.isRootNode = function() {
		return !this.parent;
	}
}

module.exports = wrapNode;