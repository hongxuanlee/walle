/**
 * interpreter plugin
 * 
 * as contracted
 *   echo : output function
 */

var NodeInterpreter = require("./nodeInterpreter.js");
var wrapInterface = require("./wrapInterface.js");
var wrapNode = require("./wrapNode.js");
var codeJointer = require("./codeJointer.js");

var PREFIX_FUN = '__g__';

module.exports = {
	create: function(interfaceConf) {

		var nodeInterpreter = NodeInterpreter.create();
		var counter = null;
		var globalFieldCodes = null;

		var interpret = function(root) {
			wrapNode(root);
			counter = 0;
			globalFieldCodes = [];
			var codeBody = interpretTokenTree(root),
				prevCode = getGlobalStatementCode();
			return wrapInterface(prevCode + codeBody, interfaceConf);
		}

		var interpretTokenTree = function(tokenTree) {
			var code = "";
			if (tokenTree.isRootNode()) {
				interpretBlockNode(tokenTree);
			} else if (tokenTree.isBlockNode()) {
				interpretBlockNode(tokenTree);
				code = codeJointer.getRunBlockCode(tokenTree);
			} else {
				code = nodeInterpreter.interpretNode(tokenTree);
			}
			// fetch global code
			globalFieldCodes.push(tokenTree.getGlobalFeildCode());
			return code;
		}

		var getGlobalStatementCode = function() {
			var code = "";
			for (var i = 0; i < globalFieldCodes.length; i++) {
				code += globalFieldCodes[i];
			}
			return code;
		}

		var interpretBlockNode = function(node) {
			var funName = generateFunctionName();
			node.funName = funName;
			var childCodes = interpretChildCodes(node);
			var pushCode = nodeInterpreter.parseBlockNode(node, childCodes);
			return pushCode;
		}

		var interpretChildCodes = function(node) {
			var childCodes = [];
			var children = node.children;
			if (!children) children = [];
			for (var i = 0; i < children.length; i++) {
				var child = children[i];
				var childCode = interpretTokenTree(child);
				childCodes.push(childCode);
			}
			return childCodes;
		}

		var generateFunctionName = function() {
			var funName = PREFIX_FUN + counter;
			counter++;
			return funName;
		}

		return {
			interpret: interpret,
			addInterpreterPlugin: nodeInterpreter.addInterpreterPlugin
		}
	}
}