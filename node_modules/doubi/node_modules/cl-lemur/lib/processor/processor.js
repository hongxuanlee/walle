/**
 * plugin name
 * process plugin
 */

module.exports = {
	create: function() {
		var processPluginMap = {};

		var process = function(tokenTree) {
			var root = tokenTree;
			processNode(root);
			var children = root.children;
			if (!children) children = [];
			for (var i = 0; i < children.length; i++) {
				process(children[i]);
			}
		}

		var processNode = function(node) {
			var processor = node.token && node.token.processor;
			if (processor && Array.isArray(processor)) {
				for (var i = 0; i < processor.length; i++) {
					var plugin = processPluginMap[processor[i]];
					plugin && plugin(node);
				}
			}
		}

		var addProcessPlugin = function(name, plugin) {
			if (plugin && typeof plugin === "function") {
				processPluginMap[name] = plugin;
			}
		}

		addProcessPlugin("attributeMap", function(node) {
			var word = node.token.word;
			if (!word) word = "";
			word = word.trim();
			var pairs = word.match(/\S+\s*=\s*\S+/g);
			var attrMap = {};
			if (pairs) {
				for (var i = 0; i < pairs.length; i++) {
					var pair = pairs[i];
					var kvs = pair.split("=");
					var value = kvs[1].trim();
					if (!/^".*"$/g.test(value) && !/^'.*'$/g.test(value) &&
						!/^[+-]?\d+$/g.test(value) && value !== "false" &&
						value !== "true" && value !== "null" &&
						value !== "undefined" && value !== "NaN" &&
						value !== "Infinity") {
						value = '"' + value + '"';
					}
					attrMap[kvs[0].trim()] = value;
				}
				node.token.__attributeMap = attrMap;
			}
		});
		
		return {
			process: process,
			addProcessPlugin: addProcessPlugin
		}
	}
}