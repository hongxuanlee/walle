var Engine = require("../lib/engine/engine.js");
var fs = require("fs");
var path = require("path");
var assert = require("assert");

describe("test run res", function() {
	it("fetch block inner res", function() {
		var _left = "<#";
		var _right = "#>";
		var engine = Engine.create({
			tokenGrammers: [{
				leftDelimiter: _left + "\\s*script(?=(" + _right + ")|\\s)",
				wordReg: ".*?",
				rightDelimiter: _right,
				type: "script",
				block: {
					type: "start"
				},
				processor: ["attributeMap"]
			}, {
				leftDelimiter: _left + "\\s*/script(?=(" + _right + ")|\\s)",
				wordReg: ".*?",
				rightDelimiter: _right,
				type: "script",
				block: {
					type: "end"
				}
			}, {
				leftDelimiter: _left + "\\s*body(?=(" + _right + ")|\\s)",
				wordReg: ".*?",
				rightDelimiter: _right,
				type: "body",
				block: {
					type: "start"
				},
				processor: ["attributeMap"]
			}, {
				leftDelimiter: _left + "\\s*/body(?=(" + _right + ")|\\s)",
				wordReg: ".*?",
				rightDelimiter: _right,
				type: "body",
				block: {
					type: "end"
				}
			}],
			interpreterPluginMap: {
				"script": function(token, childCodes) {
					this.addGlobalCode("lemur.collect('res-script',function(){" + childCodes + "},'" + this.funName + "');");
				},
				"body": function(token, childCodes) {
					return "lemur.echo('<body>');lemur.echo('<script>');lemur.runRes('res-script');lemur.echo('</script>');lemur.echo('</body>');";
				}
			}
		});
		var source = fs.readFileSync(path.join(__dirname, "./testTmpl/runRes/test1.tmpl"), "utf-8");
		var target = engine.compile(source);
		fs.writeFileSync(path.join(__dirname, "./result/runRes/test1.js"), target, "utf-8");

		var template = null;
		eval("template = " + target);
		//
		var str = template.extract('res-script', {
			key: "id",
			value: "block1"
		});
		assert.equal('console.log("what");', str);
		//
		var str2 = template.extract('res-script', {
			key: "id",
			value: "block2"
		});
		assert.equal('console.log("res");', str2);
		//
		var str3 = template.extract('res-script');
		assert.equal('console.log("what");console.log("res");', str3);
	});

	it("get res array", function() {
		var _left = "<#";
		var _right = "#>";
		var engine = Engine.create({
			tokenGrammers: [{
				leftDelimiter: _left + "\\s*script(?=(" + _right + ")|\\s)",
				wordReg: ".*?",
				rightDelimiter: _right,
				type: "script",
				block: {
					type: "start"
				},
				processor: ["attributeMap"]
			}, {
				leftDelimiter: _left + "\\s*/script(?=(" + _right + ")|\\s)",
				wordReg: ".*?",
				rightDelimiter: _right,
				type: "script",
				block: {
					type: "end"
				}
			}, {
				leftDelimiter: _left + "\\s*body(?=(" + _right + ")|\\s)",
				wordReg: ".*?",
				rightDelimiter: _right,
				type: "body",
				block: {
					type: "start"
				},
				processor: ["attributeMap"]
			}, {
				leftDelimiter: _left + "\\s*/body(?=(" + _right + ")|\\s)",
				wordReg: ".*?",
				rightDelimiter: _right,
				type: "body",
				block: {
					type: "end"
				}
			}],
			interpreterPluginMap: {
				"script": function(token, childCodes) {
					this.addGlobalCode("lemur.collect('res-script',function(){" + childCodes + "},'" + this.funName + "');");
				},
				"body": function(token, childCodes) {
					return "lemur.echo('<body>');lemur.echo('<script>');lemur.runRes('res-script');lemur.echo('</script>');lemur.echo('</body>');";
				}
			}
		});
		var source = fs.readFileSync(path.join(__dirname, "./testTmpl/runRes/test2.tmpl"), "utf-8");
		var target = engine.compile(source);
		fs.writeFileSync(path.join(__dirname, "./result/runRes/test2.js"), target, "utf-8");

		var template = null;
		eval("template = " + target);

		//
		var res = template.extract('res-script', null, "array");
		assert.equal(2, res.length);
	});
});