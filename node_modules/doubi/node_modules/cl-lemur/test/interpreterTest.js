var fs = require("fs");
var path = require("path");
var assert = require("assert");

var TokenSpliter = require("hanuman");

describe("test interpreter", function() {
	it('should get get target code', function() {
		var processor = require("../lib/processor/processor.js").create();
		var interpreter = require("../lib/interpreter/interpreter.js").create();
		var _left = "<#";
		var _right = "#>";

		var tokenSpliter = new TokenSpliter([{
			leftDelimiter: _left,
			wordReg: ".*?",
			rightDelimiter: _right,
			type: "interpolate"
		}, {
			leftDelimiter: _left + "=",
			wordReg: ".*?",
			rightDelimiter: _right,
			type: "evaluate"
		}]);

		var source = fs.readFileSync(path.join(__dirname, "./testTmpl/test6.tmpl"), "utf-8");
		var tokenTree = tokenSpliter.buildTokenTree(source);
		processor.process(tokenTree);
		var tcode = interpreter.interpret(tokenTree);
		console.log(tcode);
	});

	it('should work for selfDefined interpreter', function() {
		var processor = require("../lib/processor/processor.js").create();
		var interpreter = require("../lib/interpreter/interpreter.js").create();
		var _left = "<#";
		var _right = "#>";

		var tokenSpliter = new TokenSpliter([{
			leftDelimiter: _left,
			wordReg: ".*?",
			rightDelimiter: _right,
			type: "interpolate"
		}, {
			leftDelimiter: _left + "=",
			wordReg: ".*?",
			rightDelimiter: _right,
			type: "evaluate"
		}, {
			leftDelimiter: _left + "\\s*inline(?=(" + _right + ")|\\s)",
			wordReg: ".*?",
			rightDelimiter: _right,
			type: "inline",
			block: {
				type: "inline"
			},
			processor: ["attributeCode", "attributeMap"]
		}, {
			leftDelimiter: _left + "\\s*block(?=(" + _right + ")|\\s)",
			wordReg: ".*?",
			rightDelimiter: _right,
			type: "block",
			block: {
				type: "start"
			},
			processor: ["attributeCode", "attributeMap"]
		}, {
			leftDelimiter: _left + "\\s*/block(?=(" + _right + ")|\\s)",
			wordReg: ".*?",
			rightDelimiter: _right,
			type: "block",
			block: {
				type: "end"
			}
		}]);

		interpreter.addInterpreterPlugin("block", function(token, childCodes) {
			var code = childCodes && childCodes.join("");
			var escapeText = function(text) {
				text = text.replace(/(')/g, "\\'");
				return text;
			};
			code += "echo('" + escapeText("I'm in block, I'm happy!") + "');";
			return code;
		});

		var source = fs.readFileSync(path.join(__dirname, "./testTmpl/test7.tmpl"), "utf-8");
		var tokenTree = tokenSpliter.buildTokenTree(source);
		processor.process(tokenTree);
		var tcode = interpreter.interpret(tokenTree);
		console.log(tcode);
		fs.writeFileSync(path.join(__dirname, "./result/test.js"), tcode, "utf-8");
	});
});