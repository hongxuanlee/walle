var Engine = require("../lib/engine/engine.js");
var fs = require("fs");
var path = require("path");
var assert = require("assert");

describe("test lemurWrapper", function() {
	var _left = "<#";
	var _right = "#>";
	var engine = Engine.create({
		tokenGrammers: [{
			leftDelimiter: _left + "\\s*script(?=(" + _right + ")|\\s)",
			wordReg: ".*?",
			rightDelimiter: _right,
			type: "script",
			block: {
				type: "start"
			},
			processor: ["attributeMap"]
		}, {
			leftDelimiter: _left + "\\s*/script(?=(" + _right + ")|\\s)",
			wordReg: ".*?",
			rightDelimiter: _right,
			type: "script",
			block: {
				type: "end"
			}
		}, {
			leftDelimiter: _left + "\\s*body(?=(" + _right + ")|\\s)",
			wordReg: ".*?",
			rightDelimiter: _right,
			type: "body",
			block: {
				type: "start"
			},
			processor: ["attributeMap"]
		}, {
			leftDelimiter: _left + "\\s*/body(?=(" + _right + ")|\\s)",
			wordReg: ".*?",
			rightDelimiter: _right,
			type: "body",
			block: {
				type: "end"
			}
		}],
		interpreterPluginMap: {
			"script": function(token, childCodes) {
				this.addGlobalCode("lemur.collect('res-script',function(){" + childCodes + "},'" + this.funName + "');");
				return "lemur.testWrapper();";
			},
			"body": function(token, childCodes) {
				return "lemur.echo('<body>');lemur.echo('<script>');lemur.runRes('res-script');lemur.echo('</script>');lemur.echo('</body>');";
			}
		},
		interfaceConf: {
			lemurWrapper: "function(Lemur){Lemur.prototype.testWrapper = function(){console.log('testWrapper');}}"
		}
	});
	var source = fs.readFileSync(path.join(__dirname, "./testTmpl/lemurWrapper/test1.tmpl"), "utf-8");
	var target = engine.compile(source);
	fs.writeFileSync(path.join(__dirname, "./result/lemurWrapper/test1.js"), target, "utf-8");

	var template = null;
	eval("template = " + target);
	template.run();
});