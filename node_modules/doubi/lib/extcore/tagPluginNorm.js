/**
 * 
 * tag plugin. parse tag type token, looks like these:
 * <# widget #>
 * <# script #> alert(1); <#/ script #>
 * 
 * @author  ddchen
 * { 
 *     tagToken: {
 *        tagName:"require",
 *        tagType:"inline"
 *     },
 *     process:function(tagNode){},
 *     interpret:function(token, childCodes){}
 * }
 */

var PREFIX = "__tag_plugin__";

var parse = function(opts, config) {
	if (!opts || !opts.tagToken || !opts.tagToken.tagName) return null;
	var tagName = opts.tagToken.tagName;
	var tokens = getTokens(tagName, opts.tagToken.tagType, config);

	var tokenType = getTokenType(tagName);
	var processFunction = function(node) {
		if (node.token && node.token.type == tokenType) {
			opts.process && opts.process(node);
		}
	}
	var processPlugin = {
		name: tokenType,
		process: processFunction
	}
	var interpretPlugin = {
		type: tokenType,
		interpret: opts.interpret
	}

	return {
		tokens: tokens,
		processPlugin: processPlugin,
		interpretPlugin: interpretPlugin
	}
}

var getTokens = function(tagName, tagType, config) {
	if (!tagType) tagType = "inline";
	var tokenType = getTokenType(tagName);
	var _left = config.leftDelimiter;
	var _right = config.rightDelimiter;
	if (tagType == "block") {
		return [{
			leftDelimiter: _left + "\\s*" + tagName + "(?=(" + _right + ")|\\s)",
			wordReg: ".*?",
			rightDelimiter: _right,
			type: tokenType,
			block: {
				type: "start"
			},
			processor: ["attributeMap", tokenType]
		}, {
			leftDelimiter: _left + "\\s*/" + tagName + "(?=(" + _right + ")|\\s)",
			wordReg: ".*?",
			rightDelimiter: _right,
			type: tokenType,
			block: {
				type: "end"
			}
		}];
	} else {
		return [{
			leftDelimiter: _left + "\\s*" + tagName + "(?=(" + _right + ")|\\s)",
			wordReg: ".*?",
			rightDelimiter: _right,
			type: tokenType,
			block: {
				type: "inline"
			},
			processor: ["attributeMap", tokenType]
		}];
	}
}

var getTokenType = function(tagName) {
	return PREFIX + tagName;
}

module.exports = {
	parse: parse
}