var Lemur = (function() {
	var module = {
		exports: {}
	};
	var exports = module.exports;
	var lemurToolsWrapper = (function() {
		var module = {
			exports: {}
		};
		var exports = module.exports;
		module.exports = function(proto) {
			proto.unfold = function(data, dataName) {
				dataName = dataName || "__data";
				var code = "";
				if (data && typeof data === "object") {
					for (var name in data) {
						code += "var " + name + "=" + dataName + "['" + name + "'];";
					}
				}
				return code;
			}
		};
		return module.exports;
	})();;
	var lemurLogWrapper = (function() {
		var module = {
			exports: {}
		};
		var exports = module.exports;
		module.exports = function(proto) {
			proto.log = function() {
				console && console.log.apply(this, arguments);
			}
			proto.throw = function(content) {
				throw new Error(content);
			}
		};
		return module.exports;
	})();;
	var lemurQueryWrapper = (function() {
		var module = {
			exports: {}
		};
		var exports = module.exports;
		/**
		 * @author  ddchen
		 */

		var DEFAULT_BLOCKNAME = '__g__0';

		var queryBlockName = function(selector, __blockMap) {
			if (!selector) return DEFAULT_BLOCKNAME;
			var key = selector.key;
			var value = selector.value;
			var funcs = [];
			if (key !== undefined && value !== undefined) {
				for (var name in __blockMap) {
					var block = __blockMap[name];
					if (block.opts[key] == value) {
						return name;
					}
				}
			} else {
				return defaultFunc;
			}
		}

		module.exports = function(proto) {

			proto.queryBlock = function(selector) {
				var blockName = queryBlockName(selector, this.__blockMap);
				if (!blockName) {
					console && console.warn("can not find block for selector " + JSON.stringify(selector));
					return null;
				}
				return this.__blockMap[blockName];
			}
		};
		return module.exports;
	})();;
	var lemurResWrapper = (function() {
		var module = {
			exports: {}
		};
		var exports = module.exports;
		/**
		 * @author  ddchen
		 */


		var filterFuncs = function(funcs, __blockMap, outterBlock) {
			if (!outterBlock) return funcs;
			var filterdArr = [];
			for (var i = 0; i < funcs.length; i++) {
				var funItem = funcs[i];
				if (funItem.ownerName) {
					var innerBlock = __blockMap[funItem.ownerName];
					if (outterBlock.isAncestor(innerBlock) || outterBlock === innerBlock) {
						filterdArr.push(funItem);
					}
				}
			}
			return filterdArr;
		}

		module.exports = function(proto) {

			proto.collect = function(id, func, funName) {
				if (!(typeof func === "function")) return;
				this.__resMap[id] = this.__resMap[id] || [];
				this.__resMap[id].push({
					fun: func,
					ownerName: funName
				});
			}

			proto.runRes = function(id, selector) {
				var funcs = this.__resMap[id];
				var outterBlock = selector && this.queryBlock(selector);
				if (funcs) {
					funcs = filterFuncs(funcs, this.__blockMap, outterBlock);

					for (var i = 0; i < funcs.length; i++) {
						var funItem = funcs[i];
						funItem.fun();
					}
				}
			}

			proto.extract = function(id, selector, separator) {
				this.empty();
				this.runRes(id, selector);
				return this.getResult(separator);
			}
		};
		return module.exports;
	})();;
	var Block = (function() {
		var module = {
			exports: {}
		};
		var exports = module.exports;
		/**
		 * block
		 * 		|-------name
		 *   	|-------opts
		 *   	|-------children
		 *   	|-------parent
		 *   	|-------fun
		 *   	|-------type
		 */
		var Block = function() {
			this.opts = {};
			this.children = [];
		}

		Block.prototype = {
			constructor: Block,
			mergeConf: function(config) {
				for (var name in config) {
					if (name !== "parent" && name !== "children") {
						this[name] = config[name];
					}
				}
			},
			appendChild: function(block) {
				this.children.push(block);
				block.parent = this;
			},
			isAncestor: function(nextBlock) {
				var children = this.children;
				for (var i = 0; i < children.length; i++) {
					var child = children[i];
					if (child === nextBlock || child.isAncestor(nextBlock)) {
						return true;
					}
				}
				return false;
			},
			isDescendant: function(prevBlock) {
				var parent = this.parent;
				while (parent) {
					if (parent === prevBlock) {
						return true;
					}
					parent = parent.parent;
				}
				return false;
			}
		}

		module.exports = Block;;
		return module.exports;
	})();;

	var Lemur = function() {
		this.__output = [];
		this.__blockMap = {};
		this.__resMap = {};
	}

	Lemur.create = function() {
		return new Lemur();
	}

	var runBlock = function(block, data, context) {
		// generate closure
		try {
			var blockClosure = block.fun(data);
		} catch (e) {
			throw new Error(JSON.stringify({
				point: "Error happend when generate closure",
				block: {
					name: block.name,
					type: block.type,
					opts: block.opts
				},
				err: e.toString()
			}));
		}
		//
		try {
			context.echo(blockClosure);
		} catch (e) {
			throw new Error(JSON.stringify({
				point: "Error happend when run closure",
				block: {
					name: block.name,
					type: block.type,
					opts: block.opts
				},
				err: e.toString()
			}));
		}
	}

	Lemur.prototype = {
		contructor: Lemur,
		declare: function(config) {
			var name = config.name;
			var parent = config.parent;
			var block = this.__blockMap[name] = this.__blockMap[name] || new Block();
			if (parent) {
				var parentBlock = this.__blockMap[parent] = this.__blockMap[parent] || new Block();
				parentBlock.appendChild(block);
			}
			block.mergeConf(config);
		},
		runDeFunc: function(name, data) {
			var block = this.__blockMap[name];
			// generate closure
			runBlock(block, data, this);
		},
		echo: function(content) {
			if (typeof content === 'function') {
				this.__output.push(content());
			} else {
				this.__output.push(content);
			}
		},
		empty: function() {
			this.__output.splice(0, this.__output.length);
		},

		/**
		 * @param  separator  "array" return cloned output array, otherwise return jointer with it. 
		 */
		getResult: function(separator) {
			separator = separator || '';
			if (separator === "array") {
				var resArr = [];
				for (var i = 0; i < this.__output.length; i++) {
					resArr.push(this.__output[i]);
				}
				return resArr;
			} else {
				return this.__output.join(separator);
			}
		},
		run: function(data, selector, separator) {
			var block = this.queryBlock(selector);
			if (!block) return "";
			this.empty();
			runBlock(block, data, this);
			return this.getResult(separator);
		}
	}

	lemurToolsWrapper(Lemur.prototype);
	lemurLogWrapper(Lemur.prototype);
	lemurQueryWrapper(Lemur.prototype);
	lemurResWrapper(Lemur.prototype);

	module.exports = Lemur;;
	return module.exports;
})();
(function() {
	var module = {
		exports: {}
	};
	var exports = module.exports;
	var SCRIPT_RESOURCE_ID = "res-script";
	var REQUIRE_JS_CONTENT = "res-require-content-js";
	var REQUIRE_CSS_CONTENT = "res-require-content-css";


	var getBlockResource = function(proto) {
		/**
		 * get resources of block
		 */
		proto.getBlockResource = function(data, selector) {
			var html = this.run(data, selector);
			var script = this.extract(SCRIPT_RESOURCE_ID, selector);
			var js = this.extract(REQUIRE_JS_CONTENT, selector, "array");
			var css = this.extract(REQUIRE_CSS_CONTENT, selector, "array");
			return {
				html: html,
				script: script,
				js: js,
				css: css
			}
		}
	}

	module.exports = function(Lemur) {
		var proto = Lemur.prototype;
		getBlockResource(proto);
		return Lemur;
	};
	return module.exports;
})();