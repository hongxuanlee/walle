/**
 * build js for browser
 * (1) do not require node system kernel module.
 * (2) do not require a varible.
 *
 * one word: just build for front-end code only.
 */
var fs = require("fs");
var path = require("path");

var requireReg = /require\(["'](.*)["']\)/g;
var defaultModuleName = "node_modules";

module.exports.build = function(conf) {

	var mainJsPath = conf.mainJsPath;
	var targetJsPath = conf.targetJsPath;
	var exportsCode = conf.exportsCode;

	var map = getDefinedMap(mainJsPath);
	var code = defineModuleMap(map);
	var modJs = geModJs();
	code = wrapExportsCode(modJs + code, exportsCode, mainJsPath);

	fs.writeFileSync(targetJsPath, code, "utf-8");
}

var getDefinedMap = function(mainJs) {
	var map = {};
	var compile = function(jsPath) {
		var content = fs.readFileSync(jsPath, 'utf-8');
		// adust content
		content = adjustContent(jsPath, content);

		content = content.replace(requireReg, function(word, r1) {
			var filePath = getFilePath(jsPath, r1);
			compile(filePath);
			return "require('" + filePath + "')";
		});
		map[jsPath] = {
			content: content
		}
	}

	compile(mainJs);
	return map;
}

var adjustContent = function(jsPath, content) {
	if (jsPath.split(".")[1] === "json") {
		content = "module.exports = " + content;
	}
	return content;
}

var getFilePath = function(jsPath, relative) {
	var filePath = null;
	if (/^\.\/.*$/.test(relative) || /^\.\.\/.*$/.test(relative)) {
		filePath = path.join(jsPath + "/../", relative);
	} else if (relative[0] === "/") {
		filePath = relative;
	} else {
		filePath = findFileTypeModule(jsPath, relative);
	}
	if (!filePath) {
		throw new Error("can not find module: " + relative + ", in file: " + jsPath);
	}
	filePath = adjustFilePath(filePath);
	return filePath;
}

var findFileTypeModule = function(jsPath, relative) {
	var paths = createMudlePathArr(jsPath);
	for (var i = 0; i < paths.length; i++) {
		var moduleDir = paths[i];
		var curTypePath = moduleDir + "/" + relative;
		var jsType = curTypePath + ".js";
		var jsonType = curTypePath + ".json";
		var packageJson = curTypePath + "/package.json";
		var defaultModuleIndex = curTypePath + "/index.js";
		if (existsFile(curTypePath)) {
			return curTypePath;
		}
		if (existsFile(jsType)) {
			return jsType;
		}
		if (existsFile(jsonType)) {
			return jsonType;
		}
		if (existsFile(packageJson)) {
			var main = JSON.parse(fs.readFileSync(packageJson)).main;
			if (main && existsFile(main)) {
				return main;
			}
		}
		if (existsFile(defaultModuleIndex)) {
			return defaultModuleIndex;
		}
	}
}

var existsFile = function(file) {
	return fs.existsSync(file) && fs.statSync(file).isFile();
}

var createMudlePathArr = function(jsPath) {
	var paths = [];
	var parts = jsPath.split("/");
	var prefix = "";
	for (var i = 0; i < parts.length - 1; i++) {
		if (parts[i]) {
			prefix += "/" + parts[i];
		}
		paths.unshift(prefix + "/" + defaultModuleName);
	}
	return paths;
}

var adjustFilePath = function(filePath) {
	if (!filePath.split(".")[1]) {
		var jsType = filePath.split(".")[0] + ".js";
		var jsonType = filePath.split(".")[0] + ".json";
		if (fs.existsSync(jsType)) {
			return jsType;
		} else if (fs.existsSync(jsonType)) {
			return jsonType;
		} else {
			throw new Error("fail to adjust file " + filePath);
		}
	} else {
		return filePath;
	}
}

var defineModule = function(jsPath, content) {
	return "define('" + jsPath + "', function(require, module, exports){\n" + content + "\n});"
}

var defineModuleMap = function(map) {
	var code = "";
	for (var jsPath in map) {
		code += defineModule(jsPath, map[jsPath].content)
	}
	return code;
}

var geModJs = function() {
	return "var __moduleMap={};" +
		"var define = function(path,func){" +
		"__moduleMap[path] = {func:func};" +
		"};" +
		"var require = function(path){" +
		"if(!__moduleMap[path])throw new Error('can not find module:'+path);" +
		"if(__moduleMap[path].module)return __moduleMap[path].module.exports;" +
		"var module={exports:{}};" +
		"__moduleMap[path].func.apply(module, [require,module,module.exports]);" +
		"__moduleMap[path].module = module;" +
		"return __moduleMap[path].module.exports;" +
		"};";
}

var wrapExportsCode = function(code, exportsCode, MainJsPath) {
	exportsCode = exportsCode || "";
	return exportsCode + "(function(){" +
		code +
		"return require('" + MainJsPath + "')" +
		"})();";
}